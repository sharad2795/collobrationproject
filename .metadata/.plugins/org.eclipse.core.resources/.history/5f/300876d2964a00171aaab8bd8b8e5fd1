package com.niit.collobration.DAOimpl;

import java.util.List;

import javax.transaction.Transactional;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.niit.collobration.model.Friend;
@Transactional
@EnableTransactionManagement
@Repository("friendDAO")
public class FriendDAOimpl implements com.niit.collobration.DAO.FriendDAO
{
	private static final Logger log = LoggerFactory.getLogger(FriendDAOimpl.class);	
	@Autowired
	private SessionFactory sessionFactory;
	
	private FriendDAOimpl(SessionFactory sessionFactory)
	{
		this.sessionFactory=sessionFactory;
	}
	
	public List<Friend> fetchAllFriends() {
		return sessionFactory.getCurrentSession().createQuery("from Friend").list();
	}

	public List<Friend> fetchAllFriendsByUserId(String id) {
		return sessionFactory.getCurrentSession().createQuery("from Friend where userid='"+id+"'").list();
	}

	public Boolean saveFriend(Friend friend) {
		try 
		{
			sessionFactory.getCurrentSession().save(friend);
			return true;
		}
		catch (HibernateException e) 
		{
			e.printStackTrace();
			return false;
		}
	}

	public Boolean deleteFriend(Friend friend) {
		try 
		{
			sessionFactory.getCurrentSession().delete(friend);
			return true;
		}
		catch (HibernateException e) 
		{
			e.printStackTrace();
			return false;
		}
	}

	public Friend getFriendById(int id) {
		return (Friend) sessionFactory.getCurrentSession().get(Friend.class, id);
	}

	public List<Friend> fetchAllApprovedFriends(String userid) {
		return sessionFactory.getCurrentSession().createQuery("from Friend where status = 'Approved' and userid='"+userid+"'").list();
	}

	public List<Friend> fetchAllPendingFriends(String userid) {
		return sessionFactory.getCurrentSession().createQuery("from Friend where status = 'Pending' and friendid='"+userid+"'").list();
	}

	public List<Friend> fetchAllRejectFriends(String userid) {
		return sessionFactory.getCurrentSession().createQuery("from Friend where status = 'Rejected' and userid='"+userid+"'").list();
	}

	public Boolean updateFriend(Friend friend) {
		try 
		{
			sessionFactory.getCurrentSession().update(friend);
			return true;
		}
		catch (HibernateException e) 
		{
			e.printStackTrace();
			return false;
		}
	}

	public List<Friend> fetchAllPendingFriendsByUserid(String userid) {
		return sessionFactory.getCurrentSession().createQuery("from Friend where status = 'Pending' and userid='"+userid+"'").list();
	}
}
